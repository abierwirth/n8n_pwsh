name: Build and Push n8n Docker Image

on:
  schedule:
    - cron: '0 * * * *'  # jede Stunde prüfen
  workflow_dispatch:  # manueller Start möglich

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_version.outputs.latest }}
      needs_build: ${{ steps.compare.outputs.needs_build }}
    steps:
      - name: Get latest n8n version from npm
        id: get_version
        run: |
          LATEST=$(npm view n8n version)
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

      - name: Compare with last built version
        id: compare
        run: |
          LAST_TAG=$(gh release list -L 1 | awk '{print $1}')
          echo "Last tag: $LAST_TAG"
          if [[ "$LAST_TAG" != "v${{ steps.get_version.outputs.latest }}" ]]; then
            echo "needs_build=true" >> $GITHUB_OUTPUT
          else
            echo "needs_build=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    needs: check-version
    if: needs.check-version.outputs.needs_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: abierwirth/n8n:latest, abierwirth/n8n:${{ needs.check-version.outputs.latest_version }}

      - name: Create release (optional)
        run: |
          gh release create v${{ needs.check-version.outputs.latest_version }} --notes "Auto-built n8n version"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
